import argparse
import logging
import subprocess
import time

from bluekit.report import report_not_vulnerable, report_vulnerable, report_error
from bluekit.recon import Recon
from bluekit.constants import LOG_FILE

logging.basicConfig(filename=LOG_FILE, level=logging.INFO)


def check_for_method_confusion(target):
    recon = Recon()
    capability = recon.get_capabilities(target=target)
    if capability is None:
        report_not_vulnerable("Device didn't show its capabilities, most likely Legacy Pairing")
    elif capability not in ['DisplayYesNo', 'NoInputNoOutput', 'DisplayOnly', 'KeyboardOnly', 'KeyboardDisplay']:
        report_error("Capability - {} is None or not in ".format(capability) + str(['DisplayYesNo', 'NoInputNoOutput', 'DisplayOnly', 'KeyboardOnly', 'KeyboardDisplay']))
    elif capability != "DisplayYesNo":
        report_vulnerable("Device capability is {}, susceptible to Method Confusion MitM")
    else:
        report_not_vulnerable("Device uses DisplayYesNo")


def check_CVE_2018(target, directory, attempt=0):
    proc = subprocess.Popen('/usr/share/Btoolkit/modules/tools/custom_exploits/internalblue_CVE_2018_5383_Invalid.sh {} {}'.format(target, directory), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    output, err = proc.communicate()

    time.sleep(1)
    answer = input("Did you connect successfully?(Yes/No/Error):\n")
    if answer.lower() == "no":
        attempt += 1
        if attempt == 3:
            report_not_vulnerable("reported not vulnerable after trying to connect 3 times")
            return
        print("Running an attempt once again, maximum 3 times, Attempt # - {}".format(attempt))
        check_CVE_2018(target, directory, attempt)
    elif answer.lower() == "yes":
        report_vulnerable("Was able to establish a connection")
    else:
        report_error("There was an error while checking a CVE")


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-t','--target',required=False, type=str, help="target MAC address")
    parser.add_argument('-d','--directory',required=False, type=str, help="target directory")

    args = parser.parse_args()

    if args.target:
        check_CVE_2018(target=args.target, directory=args.directory)
    else:
        parser.print_help()
